[{ "/Users/minhtan/rating-movie-db/src/index.js": "1", "/Users/minhtan/rating-movie-db/src/reportWebVitals.js": "2", "/Users/minhtan/rating-movie-db/src/App.js": "3", "/Users/minhtan/rating-movie-db/src/components/PublicNavbar.js": "4", "/Users/minhtan/rating-movie-db/src/components/Pagination.js": "5", "/Users/minhtan/rating-movie-db/src/pages/MovieListPage.js": "6", "/Users/minhtan/rating-movie-db/src/components/EndPointBar.js": "7", "/Users/minhtan/rating-movie-db/src/components/InputRangeCom.js": "8", "/Users/minhtan/rating-movie-db/src/components/SearchForm.js": "9", "/Users/minhtan/rating-movie-db/src/components/GenresList.js": "10" }, { "size": 589, "mtime": 1610698059599, "results": "11", "hashOfConfig": "12" }, { "size": 362, "mtime": 1610684178207, "results": "13", "hashOfConfig": "12" }, { "size": 1145, "mtime": 1610868060042, "results": "14", "hashOfConfig": "12" }, { "size": 1236, "mtime": 1610939432653, "results": "15", "hashOfConfig": "12" }, { "size": 726, "mtime": 1610730393046, "results": "16", "hashOfConfig": "12" }, { "size": 8119, "mtime": 1610978886753, "results": "17", "hashOfConfig": "12" }, { "size": 936, "mtime": 1610768477368, "results": "18", "hashOfConfig": "12" }, { "size": 469, "mtime": 1610805026322, "results": "19", "hashOfConfig": "12" }, { "size": 639, "mtime": 1610867899828, "results": "20", "hashOfConfig": "12" }, { "size": 922, "mtime": 1610890978063, "results": "21", "hashOfConfig": "12" }, { "filePath": "22", "messages": "23", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, "1cku6p7", { "filePath": "25", "messages": "26", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, { "filePath": "27", "messages": "28", "errorCount": 0, "warningCount": 4, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "29", "usedDeprecatedRules": "24" }, { "filePath": "30", "messages": "31", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, { "filePath": "32", "messages": "33", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, { "filePath": "34", "messages": "35", "errorCount": 0, "warningCount": 4, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "36", "usedDeprecatedRules": "24" }, { "filePath": "37", "messages": "38", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, { "filePath": "39", "messages": "40", "errorCount": 0, "warningCount": 1, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "41", "usedDeprecatedRules": "24" }, { "filePath": "42", "messages": "43", "errorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0, "usedDeprecatedRules": "24" }, { "filePath": "44", "messages": "45", "errorCount": 0, "warningCount": 2, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "46" }, "/Users/minhtan/rating-movie-db/src/index.js", [], ["47", "48"], "/Users/minhtan/rating-movie-db/src/reportWebVitals.js", [], "/Users/minhtan/rating-movie-db/src/App.js", ["49", "50", "51", "52"], "import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport PublicNavbar from \"./components/PublicNavbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport MovieListPage from \"./pages/MovieListPage\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst API_URL = process.env.REACT_APP_API_URL;\n\nfunction App() {\n  /* useEffect(() => {\n    async function fetchData() {\n      const url = `${API_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`;\n      let response = await fetch(url);\n      let data = await response.json();\n      console.log(data.results);\n    }\n    fetchData();\n  }, []); */\n\n  return (\n    <div className=\"App\">\n      <PublicNavbar />\n      <Switch>\n        <Route\n          path=\"/movies/popular\"\n          render={(props) => <MovieListPage {...props} type=\"popular\" />}\n        />\n        <Route\n          path=\"/movies/top_rated\"\n          render={(props) => <MovieListPage {...props} type=\"top_rated\" />}\n        />\n        <Route path=\"/\" component={() => <MovieListPage />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n", "/Users/minhtan/rating-movie-db/src/components/PublicNavbar.js", [], "/Users/minhtan/rating-movie-db/src/components/Pagination.js", [], "/Users/minhtan/rating-movie-db/src/pages/MovieListPage.js", ["53", "54", "55", "56"], "import React, { useEffect, useState } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport Pagination from \"../components/Pagination\";\nimport EndPointBar from \"../components/EndPointBar\";\nimport InputRangeCom from \"../components/InputRangeCom\";\nimport GenresList from \"../components/GenresList\";\nimport SearchForm from \"../components/SearchForm\";\nimport { MDBView, MDBMask, MDBContainer } from \"mdbreact\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst API_URL = process.env.REACT_APP_API_URL;\nconst PIC_URL = process.env.REACT_APP_PIC_URL;\n\nconst MovieListPage = ({ type }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingGen, setIsLoadingGen] = useState(true);\n  const [results, setResults] = useState([]);\n  const [editedResults, setEditedResults] = useState([]);\n  const [numOfPage, setNumOfPage] = useState(1);\n  const [genreList, setGenreList] = useState([]);\n  /* const [endPoint, setEndPoint] = useState(\"now_playing\"); */\n  const [value, setValue] = useState({ value: { min: 0, max: 10 } });\n  /* const [searchTerm, setSearchTerm] = useState(term); */\n  useEffect(() => {\n    async function fetchData() {\n      const url =\n        \"https://api.themoviedb.org/3/genre/movie/list?api_key=0de53f8f60b3e745a57eca7021b9085b&language=en-US\";\n      let response = await fetch(url);\n      let data = await response.json();\n      setGenreList(data.genres);\n    }\n    fetchData();\n    setIsLoading(false);\n    setIsLoadingGen(false);\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      let endPoint = \"now_playing\";\n      console.log(endPoint);\n      console.log(type);\n      if (type === \"popular\") {\n        endPoint = \"popular\";\n      } else if (type === \"top_rated\") {\n        endPoint = \"top_rated\";\n      }\n      console.log(endPoint);\n      const url = `${API_URL}/movie/${endPoint}?api_key=${API_KEY}&page=${numOfPage}`;\n      console.log(url);\n      let response = await fetch(url);\n      let data = await response.json();\n      console.log(data.results);\n      setResults(data.results);\n      setEditedResults(data.results);\n      /*       setResults(results.concat(data.results)); */\n      /* setRatedResults(\n        data.results.sort(function (a, b) {\n          return b.vote_average - a.vote_average;})); */\n      /* setSearchTerm(term); */\n\n      setIsLoading(false);\n    }\n    fetchData();\n  }, [numOfPage, results.length]);\n  /* useEffect(() => {\n    let newResult = results\n      .sort(function (a, b) {\n        return b.vote_average - a.vote_average;\n      })\n      .filter(\n        (i) =>\n          i.vote_average >= value.value.min && i.vote_average <= value.value.max\n      );\n    setEditedResults(newResult);\n    setIsLoading(false);\n  }, [value]); */\n  /*   const handleLoadMore = () => {\n    setNumOfPage(numOfPage + 1);\n  };*/\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const handleSubmit = (term) => {\n    setSearchTerm(term);\n  };\n  useEffect(() => {\n    if (searchTerm !== undefined) {\n      console.log(results);\n      let newResult = results.filter((m) =>\n        m.title.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      console.log(newResult);\n      setEditedResults(newResult);\n      let newResultRange = results\n        .sort(function (a, b) {\n          return b.vote_average - a.vote_average;\n        })\n        .filter(\n          (i) =>\n            i.vote_average >= value.value.min &&\n            i.vote_average <= value.value.max\n        );\n      setEditedResults(newResultRange);\n    }\n  }, [searchTerm, value]);\n\n  return (\n    <div id=\"body-container\">\n      {/* <EndPointBar endPoint={endPoint} setEndPoint={setEndPoint} /> */}\n      {/* <SearchForm handleSubmit={handleSubmit} /> */}\n\n      <div id=\"genre-searchForm\">\n        <div className=\"col-1\"></div>\n        <div className=\"col-8\">\n          <GenresList\n            genreList={genreList}\n            setGenreList={setGenreList}\n            isLoadingGen={isLoadingGen}\n          />\n          <InputRangeCom value={value} setValue={setValue} />\n        </div>\n        <form\n          className=\"inline searchInPage col-3\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleSubmit(searchTerm);\n          }}\n        >\n          <input\n            className=\" mr-sm-2 form-control inputNav\"\n            type=\"text\"\n            placeholder=\"Search on this page\"\n            onChange={(e) => setSearchTerm(e.target.value)}\n            value={searchTerm}\n          />\n        </form>\n      </div>\n      <div className=\"list-card\">\n        <div className=\"col-1\"></div>\n        <div className=\"col-9\">\n          <div className=\"row\" style={{ textAlign: \"center\" }}>\n            {isLoading ? (\n              <h1>Is Loading</h1>\n            ) : (\n              editedResults.map((m) => {\n                return (\n                  <>\n                    <Card\n                      style={{ width: \"18rem\" }}\n                      key={m.id}\n                      className=\"movie-card\"\n                    >\n                      <MDBContainer style={{ padding: \"0\" }}>\n                        <MDBView hover zoom>\n                          <Card.Img\n                            variant=\"top\"\n                            src={`${PIC_URL}/${m.poster_path}`}\n                            class=\"img-fluid\"\n                            alt={m.title}\n                          />\n                          <MDBMask\n                            className=\"d-flex container-fluid\"\n                            overlay=\"black-strong\"\n                          >\n                            <Card.Body className=\"scroll\">\n                              {m.genre_ids.map((gId) => {\n                                return isLoadingGen ? (\n                                  <h1>is loading</h1>\n                                ) : (\n                                  genreList.map((g) => {\n                                    if (g.id === gId) {\n                                      return (\n                                        <button\n                                          key={g.id}\n                                          className=\"genres white-text\"\n                                        >\n                                          {\" \"}\n                                          {g.name}\n                                        </button>\n                                      );\n                                    } else return null;\n                                  })\n                                );\n                              })}\n                              <Card.Text className=\"white-text\">\n                                {m.release_date}\n                              </Card.Text>\n                              <Card.Title className=\"white-text\">\n                                <h2 style={{ textAlign: \"center\" }}>\n                                  {m.title}\n                                </h2>\n                              </Card.Title>\n                              <Card.Text\n                                className=\"white-text scroll\"\n                                style={{ textAlign: \"center\" }}\n                              >\n                                <h6>{m.overview}</h6>\n                              </Card.Text>\n                            </Card.Body>\n                          </MDBMask>\n                        </MDBView>\n\n                        <Card.Footer>\n                          <Card.Text className=\"black-text\">\n                            {m.vote_average}\n                          </Card.Text>\n                          <Button variant=\"primary\">Trailer</Button>\n                        </Card.Footer>\n                      </MDBContainer>\n                    </Card>\n                  </>\n                );\n              })\n            )}\n          </div>\n        </div>\n        <div className=\"col-1\"></div>\n      </div>\n\n      {/* <button onClick={handleLoadMore}>Load More</button> */}\n\n      <Pagination setNumOfPage={setNumOfPage} numOfPage={numOfPage} />\n    </div>\n  );\n};\n\nexport default MovieListPage;\n", "/Users/minhtan/rating-movie-db/src/components/EndPointBar.js", [], "/Users/minhtan/rating-movie-db/src/components/InputRangeCom.js", ["57"], "import React, { useState } from \"react\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\n\nconst InputRangeCom = ({ value, setValue }) => {\n  return (\n    <div id=\"input-range\">\n      <InputRange\n        maxValue={10}\n        minValue={0}\n        value={value.value}\n        onChange={(e) => {\n          setValue({ value: e });\n          console.log(value);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default InputRangeCom;\n", "/Users/minhtan/rating-movie-db/src/components/SearchForm.js", [], "/Users/minhtan/rating-movie-db/src/components/GenresList.js", ["58", "59"], "import React, { useEffect, useState } from \"react\";\n\nconst GenresList = ({ genreList, setGenreList, isLoadingGenre }) => {\n  /* const [genreList, setGenreList] = useState([]); */\n  /* const [isLoading, setIsLoading] = useState(true); */\n  /* useEffect(() => {\n    async function fetchData() {\n      const url =\n        \"https://api.themoviedb.org/3/genre/movie/list?api_key=0de53f8f60b3e745a57eca7021b9085b&language=en-US\";\n      let response = await fetch(url);\n      let data = await response.json();\n      setGenreList(data.genres);\n    }\n    fetchData();\n    setIsLoading(false);\n  }, []); */\n  return (\n    <div id=\"genres\">\n      {isLoadingGenre ? (\n        <h1>is loading</h1>\n      ) : (\n        genreList.map((g) => {\n          return (\n            <button key={g.id} className=\"genres\">\n              {g.name}\n            </button>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default GenresList;\n", { "ruleId": "60", "replacedBy": "61" }, { "ruleId": "62", "replacedBy": "63" }, { "ruleId": "64", "severity": 1, "message": "65", "line": 2, "column": 17, "nodeType": "66", "messageId": "67", "endLine": 2, "endColumn": 25 }, { "ruleId": "64", "severity": 1, "message": "68", "line": 2, "column": 27, "nodeType": "66", "messageId": "67", "endLine": 2, "endColumn": 36 }, { "ruleId": "64", "severity": 1, "message": "69", "line": 9, "column": 7, "nodeType": "66", "messageId": "67", "endLine": 9, "endColumn": 14 }, { "ruleId": "64", "severity": 1, "message": "70", "line": 10, "column": 7, "nodeType": "66", "messageId": "67", "endLine": 10, "endColumn": 14 }, { "ruleId": "64", "severity": 1, "message": "71", "line": 5, "column": 8, "nodeType": "66", "messageId": "67", "endLine": 5, "endColumn": 19 }, { "ruleId": "64", "severity": 1, "message": "72", "line": 8, "column": 8, "nodeType": "66", "messageId": "67", "endLine": 8, "endColumn": 18 }, { "ruleId": "73", "severity": 1, "message": "74", "line": 64, "column": 6, "nodeType": "75", "endLine": 64, "endColumn": 33, "suggestions": "76" }, { "ruleId": "73", "severity": 1, "message": "77", "line": 103, "column": 6, "nodeType": "75", "endLine": 103, "endColumn": 25, "suggestions": "78" }, { "ruleId": "64", "severity": 1, "message": "65", "line": 1, "column": 17, "nodeType": "66", "messageId": "67", "endLine": 1, "endColumn": 25 }, { "ruleId": "64", "severity": 1, "message": "68", "line": 1, "column": 17, "nodeType": "66", "messageId": "67", "endLine": 1, "endColumn": 26 }, { "ruleId": "64", "severity": 1, "message": "65", "line": 1, "column": 28, "nodeType": "66", "messageId": "67", "endLine": 1, "endColumn": 36 }, "no-native-reassign", ["79"], "no-negated-in-lhs", ["80"], "no-unused-vars", "'useState' is defined but never used.", "Identifier", "unusedVar", "'useEffect' is defined but never used.", "'API_KEY' is assigned a value but never used.", "'API_URL' is assigned a value but never used.", "'EndPointBar' is defined but never used.", "'SearchForm' is defined but never used.", "react-hooks/exhaustive-deps", "React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.", "ArrayExpression", ["81"], "React Hook useEffect has a missing dependency: 'results'. Either include it or remove the dependency array.", ["82"], "no-global-assign", "no-unsafe-negation", { "desc": "83", "fix": "84" }, { "desc": "85", "fix": "86" }, "Update the dependencies array to be: [numOfPage, results.length, type]", { "range": "87", "text": "88" }, "Update the dependencies array to be: [results, searchTerm, value]", { "range": "89", "text": "90" }, [2413, 2440], "[numOfPage, results.length, type]", [3558, 3577], "[results, searchTerm, value]"]
